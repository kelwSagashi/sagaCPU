
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARITHMETIC BYTE CLOSEBRACKET CLOSEPARENTHESIS CLOSETAG COLON COMMA COMMENT DEDENT EXTENDEDREGISTER FORMAT HEX_NUMBER_BYTE HEX_NUMBER_WORD INDENT JUMP LABEL LOAD LOGIC LXI MOV MOVP OPENBRACKET OPENPARENTHESIS OPENTAG OUT REGISTER REGISTERPAIR STORE STR STRING VARIABLE WORD\n    program : blocks\n    \n    blocks : blocks block\n           | blocks label_block\n           | block\n    \n    label_block : label_colon label_instruction\n    \n    label_instruction : INDENT instructions DEDENT \n    \n    label_colon : LABEL COLON \n    \n    block : instructions\n    \n    instructions : instructions instruction\n                 | instruction\n    \n    instruction : mov_registers\n                | mov_register_number\n                | mov_register_variable\n                | movp_registerpair_registerpair\n                | movp_extendedregister_registerpair\n                | lxi_register_number\n                | load_registerpair_variable\n                | load_registerpair_address\n                | load_extendedregister_address\n                | load_extendedregister_variable\n                | load_registerpair_number\n                | load_extendedregister_number\n                | store_variable_registerpair\n                | store_address_registerpair\n                | store_address_extendedregister\n                | store_variable_extendedregister\n                | arithmetic_byte_register_register\n                | logic_byte_register_register\n                | out_format_var\n                | out_string\n                | out\n                | jump_label\n                | jump_address\n                | variable_byte\n                | variable_word\n                | variable_str\n                | empty\n    \n    mov_registers : MOV REGISTER COMMA REGISTER\n    \n    mov_register_number : MOV REGISTER COMMA HEX_NUMBER_BYTE\n    \n    mov_register_variable : MOV REGISTER COMMA VARIABLE\n    \n    movp_registerpair_registerpair : MOVP REGISTERPAIR COMMA REGISTERPAIR\n    \n    movp_extendedregister_registerpair : MOVP EXTENDEDREGISTER COMMA REGISTERPAIR\n    \n    lxi_register_number : LXI REGISTER COMMA HEX_NUMBER_WORD\n    \n    load_registerpair_variable : LOAD REGISTERPAIR COMMA OPENBRACKET VARIABLE CLOSEBRACKET\n    \n    load_registerpair_address : LOAD REGISTERPAIR COMMA OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET\n    \n    load_extendedregister_address : LOAD EXTENDEDREGISTER COMMA OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET\n    \n    load_extendedregister_variable : LOAD EXTENDEDREGISTER COMMA OPENBRACKET VARIABLE CLOSEBRACKET\n    \n    load_registerpair_number : LOAD REGISTERPAIR COMMA HEX_NUMBER_WORD \n    \n    load_extendedregister_number : LOAD EXTENDEDREGISTER COMMA HEX_NUMBER_WORD \n    \n    store_variable_registerpair : STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA REGISTERPAIR\n    \n    store_address_registerpair : STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA REGISTERPAIR\n    \n    store_variable_extendedregister : STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA EXTENDEDREGISTER\n    \n    store_address_extendedregister : STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA EXTENDEDREGISTER\n    \n    arithmetic_byte_register_register : ARITHMETIC OPENTAG BYTE CLOSETAG REGISTER COMMA REGISTER\n    \n    logic_byte_register_register : LOGIC OPENTAG BYTE CLOSETAG REGISTER COMMA REGISTER\n    \n    out_format_var : OUT OPENPARENTHESIS FORMAT COMMA VARIABLE CLOSEPARENTHESIS\n    \n    out_string : OUT OPENPARENTHESIS STRING CLOSEPARENTHESIS\n    \n    out : OUT OPENPARENTHESIS CLOSEPARENTHESIS\n    \n    jump_label : JUMP OPENBRACKET LABEL CLOSEBRACKET\n    \n    jump_address : JUMP OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET\n    \n    variable_byte : VARIABLE OPENTAG BYTE CLOSETAG COLON HEX_NUMBER_BYTE\n    \n    variable_word : VARIABLE OPENTAG WORD CLOSETAG COLON HEX_NUMBER_WORD\n    \n    variable_str : VARIABLE OPENTAG STR CLOSETAG COLON STRING\n    \n    empty :\n    '
    
_lr_action_items = {'MOV':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[33,33,-4,33,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,33,-58,33,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'MOVP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[35,35,-4,35,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,35,-58,35,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'LXI':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[36,36,-4,36,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,36,-58,36,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'LOAD':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[37,37,-4,37,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,37,-58,37,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'STORE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[38,38,-4,38,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,38,-58,38,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'ARITHMETIC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[39,39,-4,39,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,39,-58,39,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'LOGIC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[40,40,-4,40,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,40,-58,40,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'OUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[41,41,-4,41,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,41,-58,41,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'JUMP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,61,77,81,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[42,42,-4,42,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,42,-58,42,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,55,60,61,63,77,81,82,83,84,88,89,90,91,92,93,94,99,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[34,34,-4,34,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,72,-5,34,84,-58,34,-38,-39,-40,-41,-42,-43,107,-48,110,-49,115,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'LABEL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,59,60,77,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[-64,46,-4,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,79,-5,-58,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,43,44,47,60,77,82,83,84,88,89,90,92,94,100,101,102,103,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[-64,0,-1,-4,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-2,-3,-9,-5,-58,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-6,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'DEDENT':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,47,61,77,81,82,83,84,88,89,90,92,94,100,101,102,116,117,118,119,120,121,122,123,124,125,126,129,130,131,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-9,-64,-58,103,-38,-39,-40,-41,-42,-43,-48,-49,-57,-59,-60,-61,-62,-63,-44,-45,-46,-47,-50,-52,-51,-53,-56,-54,-55,]),'REGISTER':([33,36,63,97,98,127,128,],[48,52,82,113,114,130,131,]),'OPENTAG':([34,39,40,],[49,56,57,]),'REGISTERPAIR':([35,37,67,68,111,112,],[50,53,88,89,123,125,]),'EXTENDEDREGISTER':([35,37,111,112,],[51,54,124,126,]),'OPENBRACKET':([38,42,70,71,],[55,59,91,93,]),'OPENPARENTHESIS':([41,],[58,]),'INDENT':([45,62,],[61,-7,]),'COLON':([46,85,86,87,],[62,104,105,106,]),'COMMA':([48,50,51,52,53,54,76,95,96,113,114,],[63,67,68,69,70,71,99,111,112,127,128,]),'BYTE':([49,56,57,],[64,74,75,]),'WORD':([49,],[65,]),'STR':([49,],[66,]),'HEX_NUMBER_WORD':([55,59,69,70,71,91,93,105,],[73,80,90,92,94,108,109,117,]),'FORMAT':([58,],[76,]),'STRING':([58,106,],[78,118,]),'CLOSEPARENTHESIS':([58,78,115,],[77,100,129,]),'HEX_NUMBER_BYTE':([63,104,],[83,116,]),'CLOSETAG':([64,65,66,74,75,],[85,86,87,97,98,]),'CLOSEBRACKET':([72,73,79,80,107,108,109,110,],[95,96,101,102,119,120,121,122,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'blocks':([0,],[2,]),'block':([0,2,],[3,43,]),'instructions':([0,2,61,],[4,4,81,]),'instruction':([0,2,4,61,81,],[5,5,47,5,47,]),'mov_registers':([0,2,4,61,81,],[6,6,6,6,6,]),'mov_register_number':([0,2,4,61,81,],[7,7,7,7,7,]),'mov_register_variable':([0,2,4,61,81,],[8,8,8,8,8,]),'movp_registerpair_registerpair':([0,2,4,61,81,],[9,9,9,9,9,]),'movp_extendedregister_registerpair':([0,2,4,61,81,],[10,10,10,10,10,]),'lxi_register_number':([0,2,4,61,81,],[11,11,11,11,11,]),'load_registerpair_variable':([0,2,4,61,81,],[12,12,12,12,12,]),'load_registerpair_address':([0,2,4,61,81,],[13,13,13,13,13,]),'load_extendedregister_address':([0,2,4,61,81,],[14,14,14,14,14,]),'load_extendedregister_variable':([0,2,4,61,81,],[15,15,15,15,15,]),'load_registerpair_number':([0,2,4,61,81,],[16,16,16,16,16,]),'load_extendedregister_number':([0,2,4,61,81,],[17,17,17,17,17,]),'store_variable_registerpair':([0,2,4,61,81,],[18,18,18,18,18,]),'store_address_registerpair':([0,2,4,61,81,],[19,19,19,19,19,]),'store_address_extendedregister':([0,2,4,61,81,],[20,20,20,20,20,]),'store_variable_extendedregister':([0,2,4,61,81,],[21,21,21,21,21,]),'arithmetic_byte_register_register':([0,2,4,61,81,],[22,22,22,22,22,]),'logic_byte_register_register':([0,2,4,61,81,],[23,23,23,23,23,]),'out_format_var':([0,2,4,61,81,],[24,24,24,24,24,]),'out_string':([0,2,4,61,81,],[25,25,25,25,25,]),'out':([0,2,4,61,81,],[26,26,26,26,26,]),'jump_label':([0,2,4,61,81,],[27,27,27,27,27,]),'jump_address':([0,2,4,61,81,],[28,28,28,28,28,]),'variable_byte':([0,2,4,61,81,],[29,29,29,29,29,]),'variable_word':([0,2,4,61,81,],[30,30,30,30,30,]),'variable_str':([0,2,4,61,81,],[31,31,31,31,31,]),'empty':([0,2,4,61,81,],[32,32,32,32,32,]),'label_block':([2,],[44,]),'label_colon':([2,],[45,]),'label_instruction':([45,],[60,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> blocks','program',1,'p_program','testply.py',202),
  ('blocks -> blocks block','blocks',2,'p_blocks','testply.py',209),
  ('blocks -> blocks label_block','blocks',2,'p_blocks','testply.py',210),
  ('blocks -> block','blocks',1,'p_blocks','testply.py',211),
  ('label_block -> label_colon label_instruction','label_block',2,'p_label_block','testply.py',215),
  ('label_instruction -> INDENT instructions DEDENT','label_instruction',3,'p_label_instruction','testply.py',219),
  ('label_colon -> LABEL COLON','label_colon',2,'p_label_colon','testply.py',223),
  ('block -> instructions','block',1,'p_block','testply.py',227),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','testply.py',231),
  ('instructions -> instruction','instructions',1,'p_instructions','testply.py',232),
  ('instruction -> mov_registers','instruction',1,'p_instruction','testply.py',236),
  ('instruction -> mov_register_number','instruction',1,'p_instruction','testply.py',237),
  ('instruction -> mov_register_variable','instruction',1,'p_instruction','testply.py',238),
  ('instruction -> movp_registerpair_registerpair','instruction',1,'p_instruction','testply.py',239),
  ('instruction -> movp_extendedregister_registerpair','instruction',1,'p_instruction','testply.py',240),
  ('instruction -> lxi_register_number','instruction',1,'p_instruction','testply.py',241),
  ('instruction -> load_registerpair_variable','instruction',1,'p_instruction','testply.py',242),
  ('instruction -> load_registerpair_address','instruction',1,'p_instruction','testply.py',243),
  ('instruction -> load_extendedregister_address','instruction',1,'p_instruction','testply.py',244),
  ('instruction -> load_extendedregister_variable','instruction',1,'p_instruction','testply.py',245),
  ('instruction -> load_registerpair_number','instruction',1,'p_instruction','testply.py',246),
  ('instruction -> load_extendedregister_number','instruction',1,'p_instruction','testply.py',247),
  ('instruction -> store_variable_registerpair','instruction',1,'p_instruction','testply.py',248),
  ('instruction -> store_address_registerpair','instruction',1,'p_instruction','testply.py',249),
  ('instruction -> store_address_extendedregister','instruction',1,'p_instruction','testply.py',250),
  ('instruction -> store_variable_extendedregister','instruction',1,'p_instruction','testply.py',251),
  ('instruction -> arithmetic_byte_register_register','instruction',1,'p_instruction','testply.py',252),
  ('instruction -> logic_byte_register_register','instruction',1,'p_instruction','testply.py',253),
  ('instruction -> out_format_var','instruction',1,'p_instruction','testply.py',254),
  ('instruction -> out_string','instruction',1,'p_instruction','testply.py',255),
  ('instruction -> out','instruction',1,'p_instruction','testply.py',256),
  ('instruction -> jump_label','instruction',1,'p_instruction','testply.py',257),
  ('instruction -> jump_address','instruction',1,'p_instruction','testply.py',258),
  ('instruction -> variable_byte','instruction',1,'p_instruction','testply.py',259),
  ('instruction -> variable_word','instruction',1,'p_instruction','testply.py',260),
  ('instruction -> variable_str','instruction',1,'p_instruction','testply.py',261),
  ('instruction -> empty','instruction',1,'p_instruction','testply.py',262),
  ('mov_registers -> MOV REGISTER COMMA REGISTER','mov_registers',4,'p_mov_registers','testply.py',267),
  ('mov_register_number -> MOV REGISTER COMMA HEX_NUMBER_BYTE','mov_register_number',4,'p_mov_register_number','testply.py',271),
  ('mov_register_variable -> MOV REGISTER COMMA VARIABLE','mov_register_variable',4,'p_mov_register_variable','testply.py',275),
  ('movp_registerpair_registerpair -> MOVP REGISTERPAIR COMMA REGISTERPAIR','movp_registerpair_registerpair',4,'p_movp_registerpair_registerpair','testply.py',279),
  ('movp_extendedregister_registerpair -> MOVP EXTENDEDREGISTER COMMA REGISTERPAIR','movp_extendedregister_registerpair',4,'p_movp_extendedregister_registerpair','testply.py',283),
  ('lxi_register_number -> LXI REGISTER COMMA HEX_NUMBER_WORD','lxi_register_number',4,'p_lxi_register_number','testply.py',287),
  ('load_registerpair_variable -> LOAD REGISTERPAIR COMMA OPENBRACKET VARIABLE CLOSEBRACKET','load_registerpair_variable',6,'p_load_registerpair_variabl','testply.py',291),
  ('load_registerpair_address -> LOAD REGISTERPAIR COMMA OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET','load_registerpair_address',6,'p_load_registerpair_address','testply.py',295),
  ('load_extendedregister_address -> LOAD EXTENDEDREGISTER COMMA OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET','load_extendedregister_address',6,'p_load_extendedregister_address','testply.py',299),
  ('load_extendedregister_variable -> LOAD EXTENDEDREGISTER COMMA OPENBRACKET VARIABLE CLOSEBRACKET','load_extendedregister_variable',6,'p_load_extendedregister_variable','testply.py',303),
  ('load_registerpair_number -> LOAD REGISTERPAIR COMMA HEX_NUMBER_WORD','load_registerpair_number',4,'p_load_registerpair_number','testply.py',307),
  ('load_extendedregister_number -> LOAD EXTENDEDREGISTER COMMA HEX_NUMBER_WORD','load_extendedregister_number',4,'p_load_extendedregister_number','testply.py',311),
  ('store_variable_registerpair -> STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA REGISTERPAIR','store_variable_registerpair',6,'p_store_variable_registerpair','testply.py',315),
  ('store_address_registerpair -> STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA REGISTERPAIR','store_address_registerpair',6,'p_store_address_registerpair','testply.py',319),
  ('store_variable_extendedregister -> STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA EXTENDEDREGISTER','store_variable_extendedregister',6,'p_store_variable_extendedregister','testply.py',323),
  ('store_address_extendedregister -> STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA EXTENDEDREGISTER','store_address_extendedregister',6,'p_store_address_extendedregister','testply.py',327),
  ('arithmetic_byte_register_register -> ARITHMETIC OPENTAG BYTE CLOSETAG REGISTER COMMA REGISTER','arithmetic_byte_register_register',7,'p_arithmetic_byte_register_register','testply.py',331),
  ('logic_byte_register_register -> LOGIC OPENTAG BYTE CLOSETAG REGISTER COMMA REGISTER','logic_byte_register_register',7,'p_logic_byte_register_register','testply.py',335),
  ('out_format_var -> OUT OPENPARENTHESIS FORMAT COMMA VARIABLE CLOSEPARENTHESIS','out_format_var',6,'p_out_format_var','testply.py',339),
  ('out_string -> OUT OPENPARENTHESIS STRING CLOSEPARENTHESIS','out_string',4,'p_out_string','testply.py',343),
  ('out -> OUT OPENPARENTHESIS CLOSEPARENTHESIS','out',3,'p_out','testply.py',347),
  ('jump_label -> JUMP OPENBRACKET LABEL CLOSEBRACKET','jump_label',4,'p_jump_label','testply.py',351),
  ('jump_address -> JUMP OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET','jump_address',4,'p_jump_address','testply.py',355),
  ('variable_byte -> VARIABLE OPENTAG BYTE CLOSETAG COLON HEX_NUMBER_BYTE','variable_byte',6,'p_variable_byte','testply.py',359),
  ('variable_word -> VARIABLE OPENTAG WORD CLOSETAG COLON HEX_NUMBER_WORD','variable_word',6,'p_variable_word','testply.py',363),
  ('variable_str -> VARIABLE OPENTAG STR CLOSETAG COLON STRING','variable_str',6,'p_variable_str','testply.py',367),
  ('empty -> <empty>','empty',0,'p_empty','testply.py',371),
]
