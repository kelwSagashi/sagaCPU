
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARITHMETICB BYTE CLOSEBRACKET CLOSEPARENTHESIS CLOSETAG COLON COMMA COMMENT DEDENT EXTENDEDREGISTER FORMAT HEX_NUMBER_BYTE HEX_NUMBER_WORD INDENT JUMP LABEL LOAD LXI MOV MOVP MVA OPENBRACKET OPENPARENTHESIS OPENTAG OUT REGISTER REGISTERPAIR STORE STR STRING VARIABLE WORD\n    program : blocks\n    \n    blocks : blocks block\n           | blocks label_block\n           | block\n    \n    label_block : label_colon label_instruction\n    \n    label_instruction : INDENT instructions DEDENT \n    \n    label_colon : LABEL COLON \n    \n    block : instructions\n    \n    instructions : instructions instruction\n                 | instruction\n    \n    instruction : mov_registers\n                | mov_register_number\n                | mov_register_variable\n                | movp_register_pair_number\n                | movp_register_pair_variable\n                | movp_register_pair_register_pair\n                | movp_extended_register_pair_number\n                | movp_extended_register_pair_variable\n                | movp_extended_register_pair_register_pair\n                | mva_number\n                | lxi_register_number\n                | load_variable_address\n                | store_value\n                | arithmeticb\n                | out_format_var\n                | out_string\n                | out\n                | jump_label\n                | jump_address\n                | variable_byte\n                | variable_word\n                | variable_str\n                | empty\n    \n    mov_registers : MOV REGISTER COMMA REGISTER\n    \n    mov_register_number : MOV REGISTER COMMA HEX_NUMBER_BYTE\n    \n    mov_register_variable : MOV REGISTER COMMA VARIABLE\n    \n    movp_register_pair_number : MOVP REGISTERPAIR COMMA HEX_NUMBER_WORD\n    \n    movp_register_pair_variable : MOVP REGISTERPAIR COMMA VARIABLE\n    \n    movp_register_pair_register_pair : MOVP REGISTERPAIR COMMA REGISTERPAIR\n    \n    movp_extended_register_pair_register_pair : MOVP EXTENDEDREGISTER COMMA REGISTERPAIR\n    \n    movp_extended_register_pair_variable : MOVP EXTENDEDREGISTER COMMA VARIABLE\n    \n    movp_extended_register_pair_number : MOVP EXTENDEDREGISTER COMMA HEX_NUMBER_WORD\n    \n    mva_number : MVA HEX_NUMBER_BYTE\n    \n    lxi_register_number : LXI REGISTER COMMA HEX_NUMBER_WORD\n    \n    load_variable_address : LOAD OPENBRACKET VARIABLE CLOSEBRACKET COMMA REGISTERPAIR\n                          | LOAD OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA REGISTERPAIR\n    \n    store_value : STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA REGISTER\n                | STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA REGISTER\n                | STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA EXTENDEDREGISTER\n                | STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA EXTENDEDREGISTER\n    \n    arithmeticb : ARITHMETICB REGISTER\n    \n    out_format_var : OUT OPENPARENTHESIS FORMAT COMMA VARIABLE CLOSEPARENTHESIS\n    \n    out_string : OUT OPENPARENTHESIS STRING CLOSEPARENTHESIS\n    \n    out : OUT OPENPARENTHESIS CLOSEPARENTHESIS\n    \n    jump_label : JUMP OPENBRACKET LABEL CLOSEBRACKET\n    \n    jump_address : JUMP OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET\n    \n    variable_byte : VARIABLE OPENTAG BYTE CLOSETAG COLON HEX_NUMBER_BYTE\n    \n    variable_word : VARIABLE OPENTAG WORD CLOSETAG COLON HEX_NUMBER_WORD\n    \n    variable_str : VARIABLE OPENTAG STR CLOSETAG COLON STRING\n    \n    empty :\n    '
    
_lr_action_items = {'MOV':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[29,29,-4,29,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,29,-54,29,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'MOVP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[31,31,-4,31,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,31,-54,31,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'MVA':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[32,32,-4,32,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,32,-54,32,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'LXI':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[33,33,-4,33,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,33,-54,33,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'LOAD':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[34,34,-4,34,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,34,-54,34,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'STORE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[35,35,-4,35,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,35,-54,35,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'ARITHMETICB':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[36,36,-4,36,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,36,-54,36,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'OUT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[37,37,-4,37,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,37,-54,37,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'JUMP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[38,38,-4,38,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,38,-54,38,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'VARIABLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,50,51,52,55,56,58,62,63,70,74,75,76,77,81,82,83,84,85,86,87,92,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[30,30,-4,30,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,65,67,-51,-5,30,77,83,85,-54,30,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,104,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'LABEL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,54,55,70,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[-60,42,-4,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,72,-5,-54,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,39,40,43,48,52,55,70,75,76,77,81,82,83,84,85,86,87,93,94,95,96,105,106,107,108,109,110,111,112,113,114,],[-60,0,-1,-4,-8,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-2,-3,-9,-43,-51,-5,-54,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-6,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'DEDENT':([5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,43,48,52,56,70,74,75,76,77,81,82,83,84,85,86,87,93,94,95,105,106,107,108,109,110,111,112,113,114,],[-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-9,-43,-51,-60,-54,96,-34,-35,-36,-39,-37,-38,-42,-41,-40,-44,-53,-55,-56,-57,-58,-59,-45,-46,-47,-49,-48,-50,-52,]),'REGISTER':([29,33,36,58,102,103,],[44,49,52,75,110,112,]),'OPENTAG':([30,],[45,]),'REGISTERPAIR':([31,62,63,100,101,],[46,81,86,108,109,]),'EXTENDEDREGISTER':([31,102,103,],[47,111,113,]),'HEX_NUMBER_BYTE':([32,58,97,],[48,76,105,]),'OPENBRACKET':([34,35,38,],[50,51,54,]),'OPENPARENTHESIS':([37,],[53,]),'INDENT':([41,57,],[56,-7,]),'COLON':([42,78,79,80,],[57,97,98,99,]),'COMMA':([44,46,47,49,69,88,89,90,91,],[58,62,63,64,92,100,101,102,103,]),'BYTE':([45,],[59,]),'WORD':([45,],[60,]),'STR':([45,],[61,]),'HEX_NUMBER_WORD':([50,51,54,62,63,64,98,],[66,68,73,82,84,87,106,]),'FORMAT':([53,],[69,]),'STRING':([53,99,],[71,107,]),'CLOSEPARENTHESIS':([53,71,104,],[70,93,114,]),'CLOSETAG':([59,60,61,],[78,79,80,]),'CLOSEBRACKET':([65,66,67,68,72,73,],[88,89,90,91,94,95,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'blocks':([0,],[2,]),'block':([0,2,],[3,39,]),'instructions':([0,2,56,],[4,4,74,]),'instruction':([0,2,4,56,74,],[5,5,43,5,43,]),'mov_registers':([0,2,4,56,74,],[6,6,6,6,6,]),'mov_register_number':([0,2,4,56,74,],[7,7,7,7,7,]),'mov_register_variable':([0,2,4,56,74,],[8,8,8,8,8,]),'movp_register_pair_number':([0,2,4,56,74,],[9,9,9,9,9,]),'movp_register_pair_variable':([0,2,4,56,74,],[10,10,10,10,10,]),'movp_register_pair_register_pair':([0,2,4,56,74,],[11,11,11,11,11,]),'movp_extended_register_pair_number':([0,2,4,56,74,],[12,12,12,12,12,]),'movp_extended_register_pair_variable':([0,2,4,56,74,],[13,13,13,13,13,]),'movp_extended_register_pair_register_pair':([0,2,4,56,74,],[14,14,14,14,14,]),'mva_number':([0,2,4,56,74,],[15,15,15,15,15,]),'lxi_register_number':([0,2,4,56,74,],[16,16,16,16,16,]),'load_variable_address':([0,2,4,56,74,],[17,17,17,17,17,]),'store_value':([0,2,4,56,74,],[18,18,18,18,18,]),'arithmeticb':([0,2,4,56,74,],[19,19,19,19,19,]),'out_format_var':([0,2,4,56,74,],[20,20,20,20,20,]),'out_string':([0,2,4,56,74,],[21,21,21,21,21,]),'out':([0,2,4,56,74,],[22,22,22,22,22,]),'jump_label':([0,2,4,56,74,],[23,23,23,23,23,]),'jump_address':([0,2,4,56,74,],[24,24,24,24,24,]),'variable_byte':([0,2,4,56,74,],[25,25,25,25,25,]),'variable_word':([0,2,4,56,74,],[26,26,26,26,26,]),'variable_str':([0,2,4,56,74,],[27,27,27,27,27,]),'empty':([0,2,4,56,74,],[28,28,28,28,28,]),'label_block':([2,],[40,]),'label_colon':([2,],[41,]),'label_instruction':([41,],[55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> blocks','program',1,'p_program','testply.py',204),
  ('blocks -> blocks block','blocks',2,'p_blocks','testply.py',211),
  ('blocks -> blocks label_block','blocks',2,'p_blocks','testply.py',212),
  ('blocks -> block','blocks',1,'p_blocks','testply.py',213),
  ('label_block -> label_colon label_instruction','label_block',2,'p_label_block','testply.py',217),
  ('label_instruction -> INDENT instructions DEDENT','label_instruction',3,'p_label_instruction','testply.py',221),
  ('label_colon -> LABEL COLON','label_colon',2,'p_label_colon','testply.py',225),
  ('block -> instructions','block',1,'p_block','testply.py',229),
  ('instructions -> instructions instruction','instructions',2,'p_instructions','testply.py',233),
  ('instructions -> instruction','instructions',1,'p_instructions','testply.py',234),
  ('instruction -> mov_registers','instruction',1,'p_instruction','testply.py',238),
  ('instruction -> mov_register_number','instruction',1,'p_instruction','testply.py',239),
  ('instruction -> mov_register_variable','instruction',1,'p_instruction','testply.py',240),
  ('instruction -> movp_register_pair_number','instruction',1,'p_instruction','testply.py',241),
  ('instruction -> movp_register_pair_variable','instruction',1,'p_instruction','testply.py',242),
  ('instruction -> movp_register_pair_register_pair','instruction',1,'p_instruction','testply.py',243),
  ('instruction -> movp_extended_register_pair_number','instruction',1,'p_instruction','testply.py',244),
  ('instruction -> movp_extended_register_pair_variable','instruction',1,'p_instruction','testply.py',245),
  ('instruction -> movp_extended_register_pair_register_pair','instruction',1,'p_instruction','testply.py',246),
  ('instruction -> mva_number','instruction',1,'p_instruction','testply.py',247),
  ('instruction -> lxi_register_number','instruction',1,'p_instruction','testply.py',248),
  ('instruction -> load_variable_address','instruction',1,'p_instruction','testply.py',249),
  ('instruction -> store_value','instruction',1,'p_instruction','testply.py',250),
  ('instruction -> arithmeticb','instruction',1,'p_instruction','testply.py',251),
  ('instruction -> out_format_var','instruction',1,'p_instruction','testply.py',252),
  ('instruction -> out_string','instruction',1,'p_instruction','testply.py',253),
  ('instruction -> out','instruction',1,'p_instruction','testply.py',254),
  ('instruction -> jump_label','instruction',1,'p_instruction','testply.py',255),
  ('instruction -> jump_address','instruction',1,'p_instruction','testply.py',256),
  ('instruction -> variable_byte','instruction',1,'p_instruction','testply.py',257),
  ('instruction -> variable_word','instruction',1,'p_instruction','testply.py',258),
  ('instruction -> variable_str','instruction',1,'p_instruction','testply.py',259),
  ('instruction -> empty','instruction',1,'p_instruction','testply.py',260),
  ('mov_registers -> MOV REGISTER COMMA REGISTER','mov_registers',4,'p_mov_registers','testply.py',265),
  ('mov_register_number -> MOV REGISTER COMMA HEX_NUMBER_BYTE','mov_register_number',4,'p_mov_register_number','testply.py',269),
  ('mov_register_variable -> MOV REGISTER COMMA VARIABLE','mov_register_variable',4,'p_mov_register_variable','testply.py',273),
  ('movp_register_pair_number -> MOVP REGISTERPAIR COMMA HEX_NUMBER_WORD','movp_register_pair_number',4,'p_movp_register_pair_number','testply.py',277),
  ('movp_register_pair_variable -> MOVP REGISTERPAIR COMMA VARIABLE','movp_register_pair_variable',4,'p_movp_register_pair_variable','testply.py',281),
  ('movp_register_pair_register_pair -> MOVP REGISTERPAIR COMMA REGISTERPAIR','movp_register_pair_register_pair',4,'p_movp_register_pair_register_pair','testply.py',285),
  ('movp_extended_register_pair_register_pair -> MOVP EXTENDEDREGISTER COMMA REGISTERPAIR','movp_extended_register_pair_register_pair',4,'p_movp_extended_register_pair_register_pair','testply.py',289),
  ('movp_extended_register_pair_variable -> MOVP EXTENDEDREGISTER COMMA VARIABLE','movp_extended_register_pair_variable',4,'p_movp_extended_register_pair_variable','testply.py',293),
  ('movp_extended_register_pair_number -> MOVP EXTENDEDREGISTER COMMA HEX_NUMBER_WORD','movp_extended_register_pair_number',4,'p_movp_extended_register_pair_number','testply.py',297),
  ('mva_number -> MVA HEX_NUMBER_BYTE','mva_number',2,'p_mva_number','testply.py',301),
  ('lxi_register_number -> LXI REGISTER COMMA HEX_NUMBER_WORD','lxi_register_number',4,'p_lxi_register_number','testply.py',305),
  ('load_variable_address -> LOAD OPENBRACKET VARIABLE CLOSEBRACKET COMMA REGISTERPAIR','load_variable_address',6,'p_load_variable_address','testply.py',309),
  ('load_variable_address -> LOAD OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA REGISTERPAIR','load_variable_address',6,'p_load_variable_address','testply.py',310),
  ('store_value -> STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA REGISTER','store_value',6,'p_store_value','testply.py',314),
  ('store_value -> STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA REGISTER','store_value',6,'p_store_value','testply.py',315),
  ('store_value -> STORE OPENBRACKET VARIABLE CLOSEBRACKET COMMA EXTENDEDREGISTER','store_value',6,'p_store_value','testply.py',316),
  ('store_value -> STORE OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET COMMA EXTENDEDREGISTER','store_value',6,'p_store_value','testply.py',317),
  ('arithmeticb -> ARITHMETICB REGISTER','arithmeticb',2,'p_arithmeticb','testply.py',321),
  ('out_format_var -> OUT OPENPARENTHESIS FORMAT COMMA VARIABLE CLOSEPARENTHESIS','out_format_var',6,'p_out_format_var','testply.py',325),
  ('out_string -> OUT OPENPARENTHESIS STRING CLOSEPARENTHESIS','out_string',4,'p_out_string','testply.py',329),
  ('out -> OUT OPENPARENTHESIS CLOSEPARENTHESIS','out',3,'p_out','testply.py',333),
  ('jump_label -> JUMP OPENBRACKET LABEL CLOSEBRACKET','jump_label',4,'p_jump_label','testply.py',337),
  ('jump_address -> JUMP OPENBRACKET HEX_NUMBER_WORD CLOSEBRACKET','jump_address',4,'p_jump_address','testply.py',341),
  ('variable_byte -> VARIABLE OPENTAG BYTE CLOSETAG COLON HEX_NUMBER_BYTE','variable_byte',6,'p_variable_byte','testply.py',345),
  ('variable_word -> VARIABLE OPENTAG WORD CLOSETAG COLON HEX_NUMBER_WORD','variable_word',6,'p_variable_word','testply.py',349),
  ('variable_str -> VARIABLE OPENTAG STR CLOSETAG COLON STRING','variable_str',6,'p_variable_str','testply.py',353),
  ('empty -> <empty>','empty',0,'p_empty','testply.py',357),
]
